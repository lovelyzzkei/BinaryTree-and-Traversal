#include<iostream>
using namespace std;

// 노드의 개수는 15개
int number = 15;

// 구조체를 사용하여 하나의 노드 정보를 선언
// struct node의 포인터를 treePointer로 선언
typedef struct node* treePointer;
struct node {
	int data;
	treePointer leftChild, rightChild;	// 왼쪽 노드를 가리키는 포인터 변수와 오른쪽 노드를 가리키는 포인터 변수를 선언
};		

// 전위 순회를 구현
void preorder(node* ptr) {
	if (ptr) {		// 해당 포인터가 NULL값이 아니라 어떠한 값을 가지고 있다면 자기 자신을 출력하고 왼쪽 자식을 방문하고 이후에 오른쪽 자식을 방문한다
		cout << ptr->data << " ";
		preorder(ptr->leftChild);
		preorder(ptr->rightChild);
	}
}

// 중위 순회를 구현
void inorder(node* ptr) {
	if (ptr) {		// 해당 포인터가 NULL값이 아니라 어떠한 값을 가지고 있다면 왼쪽 자식을 방문하고 자기 자신을 출력하고 이후에 오른쪽 자식을 방문한다
		inorder(ptr->leftChild);
		cout << ptr->data << " ";
		inorder(ptr->rightChild);
	}
}

// 후위 순회를 구현
void postorder(node* ptr) {
	if (ptr) {		// 해당 포인터가 NULL값이 아니라 어떠한 값을 가지고 있다면 왼쪽 자식을 방문하고 이후에 오른쪽 자식을 방문한 뒤 자기 자신을 출력한다 
		postorder(ptr->leftChild);
		postorder(ptr->rightChild);
		cout << ptr->data << " ";
	}
}

int main() {
	node nodes[16];
	// 데이터가 들어갈 수 있는 공간들, 즉 노드들을 만듬. 연결은 되어있지 x
	for (int i = 1; i <= number; i++) {
		nodes[i].data = i;
		nodes[i].leftChild = NULL;
		nodes[i].rightChild = NULL;
	}

	// 노드들을 연결. 짝수의 데이터가 존재하는 노드들은 왼쪽 자식으로
	// 홀수의 데이터가 존재하는 노드들은 오른쪽 자식으로 연결한다
	// 연결 방식은 각 노드의 주소값을 담는 것으로 연결한다.
	for (int i = 1; i <= number; i++) {
		if (i % 2 == 0) {
			nodes[i / 2].leftChild = &nodes[i];
		}
		else {
			nodes[i / 2].rightChild = &nodes[i]; 
		}
	}

	// 전위, 중위, 후위 순회를 실행 
	preorder(&nodes[1]);
	cout << "\n";
	inorder(&nodes[1]);
	cout << "\n";
	postorder(&nodes[1]);
	cout << "\n";
	return 0;
}